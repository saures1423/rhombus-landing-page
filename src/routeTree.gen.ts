/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LandingRouteImport } from './routes/_landing'
import { Route as LandingIndexRouteImport } from './routes/_landing/index'
import { Route as AuthStartTrialRouteImport } from './routes/auth/start-trial'
import { Route as AuthSigninRouteImport } from './routes/auth/signin'
import { Route as AuthForgotPasswordRouteImport } from './routes/auth/forgot-password'
import { Route as LandingPricingRouteImport } from './routes/_landing/pricing'
import { Route as LandingFeaturesRouteImport } from './routes/_landing/features'

const LandingRoute = LandingRouteImport.update({
  id: '/_landing',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingIndexRoute = LandingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LandingRoute,
} as any)
const AuthStartTrialRoute = AuthStartTrialRouteImport.update({
  id: '/auth/start-trial',
  path: '/auth/start-trial',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthForgotPasswordRoute = AuthForgotPasswordRouteImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingPricingRoute = LandingPricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => LandingRoute,
} as any)
const LandingFeaturesRoute = LandingFeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => LandingRoute,
} as any)

export interface FileRoutesByFullPath {
  '/features': typeof LandingFeaturesRoute
  '/pricing': typeof LandingPricingRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/start-trial': typeof AuthStartTrialRoute
  '/': typeof LandingIndexRoute
}
export interface FileRoutesByTo {
  '/features': typeof LandingFeaturesRoute
  '/pricing': typeof LandingPricingRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/start-trial': typeof AuthStartTrialRoute
  '/': typeof LandingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_landing': typeof LandingRouteWithChildren
  '/_landing/features': typeof LandingFeaturesRoute
  '/_landing/pricing': typeof LandingPricingRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/start-trial': typeof AuthStartTrialRoute
  '/_landing/': typeof LandingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/features'
    | '/pricing'
    | '/auth/forgot-password'
    | '/auth/signin'
    | '/auth/start-trial'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/features'
    | '/pricing'
    | '/auth/forgot-password'
    | '/auth/signin'
    | '/auth/start-trial'
    | '/'
  id:
    | '__root__'
    | '/_landing'
    | '/_landing/features'
    | '/_landing/pricing'
    | '/auth/forgot-password'
    | '/auth/signin'
    | '/auth/start-trial'
    | '/_landing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LandingRoute: typeof LandingRouteWithChildren
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthStartTrialRoute: typeof AuthStartTrialRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_landing': {
      id: '/_landing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_landing/': {
      id: '/_landing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LandingIndexRouteImport
      parentRoute: typeof LandingRoute
    }
    '/auth/start-trial': {
      id: '/auth/start-trial'
      path: '/auth/start-trial'
      fullPath: '/auth/start-trial'
      preLoaderRoute: typeof AuthStartTrialRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_landing/pricing': {
      id: '/_landing/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof LandingPricingRouteImport
      parentRoute: typeof LandingRoute
    }
    '/_landing/features': {
      id: '/_landing/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof LandingFeaturesRouteImport
      parentRoute: typeof LandingRoute
    }
  }
}

interface LandingRouteChildren {
  LandingFeaturesRoute: typeof LandingFeaturesRoute
  LandingPricingRoute: typeof LandingPricingRoute
  LandingIndexRoute: typeof LandingIndexRoute
}

const LandingRouteChildren: LandingRouteChildren = {
  LandingFeaturesRoute: LandingFeaturesRoute,
  LandingPricingRoute: LandingPricingRoute,
  LandingIndexRoute: LandingIndexRoute,
}

const LandingRouteWithChildren =
  LandingRoute._addFileChildren(LandingRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LandingRoute: LandingRouteWithChildren,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthStartTrialRoute: AuthStartTrialRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
